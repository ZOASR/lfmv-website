<a href="/livedemo">
	<button
		class="live-demo-button rounded-md py-4 px-6 text-white font-bold text-lg cursor-pointer"
	>
		Go to live demo
	</button>
</a>

<style>
	@property --angle {
		syntax: "<angle>";
		initial-value: 0deg;
		inherits: false;
	}
	@keyframes rotate {
		100% {
			--angle: 360deg;
		}
	}

	.live-demo-button {
		--gradient: conic-gradient(
			from var(--angle) at 50% 50%,
			transparent,
			#ff3e0088 10%,
			transparent 30%,
			#61dafb88 50%,
			transparent 70%,
			#2c4f7c88 90%,
			transparent
		);
		--glow-gradient: conic-gradient(
			from var(--angle) at 50% 50%,
			transparent,
			#ff3e00 10%,
			transparent 30%,
			#61dafb 50%,
			transparent 70%,
			#2c4f7c 90%,
			transparent
		);
		position: relative;
		border: 2px solid #0000;
		background:
			linear-gradient(90deg, #000, #000) padding-box,
			var(--gradient) border-box;
		transition: box-shadow 0.3s ease;

		&::before {
			content: "";
			position: absolute;
			inset: -5px;
			background: var(--glow-gradient);
			filter: blur(10px);
			opacity: 0;
			transition: opacity 0.3s ease;
			z-index: -1;
			border-radius: inherit;
		}

		&::after {
			content: "";
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			position: absolute;
			border-radius: inherit;
			background: var(--gradient);
			filter: blur(10px);
			opacity: 0.7;
			transition: opacity 0.3s ease;
		}

		&:hover {
			&::before {
				opacity: 0.7;
			}
			&::after {
				opacity: 0.9;
			}
		}
	}
</style>

<script>
	const buttons = document.querySelectorAll(
		".live-demo-button",
	) as NodeListOf<HTMLButtonElement>;
	let angle = 0;
	let animationFrame: number;
	let targetSpeed = 0.5; // target degrees per frame
	let currentSpeed = 0.5;
	let isHovered = false;
	let hoverTimeout: number;

	function animate() {
		// Smoothly interpolate current speed towards target speed
		currentSpeed += (targetSpeed - currentSpeed) * 0.1;

		angle = (angle + currentSpeed) % 360;
		buttons.forEach((button) => {
			button.style.setProperty("--angle", `${angle}deg`);
		});
		animationFrame = requestAnimationFrame(animate);
	}

	buttons.forEach((button) => {
		button.addEventListener("mouseenter", () => {
			isHovered = true;
			targetSpeed = 2; // faster target speed on hover
			// Clear any existing timeout
			if (hoverTimeout) {
				clearTimeout(hoverTimeout);
			}

			// Set timeout to slow down after 1 second
			hoverTimeout = window.setTimeout(() => {
				if (isHovered) {
					targetSpeed = 0.5;
				}
			}, 1000);
		});

		button.addEventListener("mouseleave", () => {
			isHovered = false;
			targetSpeed = 0.5; // normal target speed
			if (hoverTimeout) {
				clearTimeout(hoverTimeout);
			}
		});
	});

	// Start animation
	animate();

	// Cleanup on component unmount
	document.addEventListener("astro:before-swap", () => {
		cancelAnimationFrame(animationFrame);
		if (hoverTimeout) {
			clearTimeout(hoverTimeout);
		}
	});
</script>
